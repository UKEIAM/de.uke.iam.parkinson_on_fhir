/*
 * This file is generated by jOOQ.
 */
package de.uke.iam.parkinson_on_fhir.database.tables;


import de.uke.iam.parkinson_on_fhir.database.Keys;
import de.uke.iam.parkinson_on_fhir.database.Public;
import de.uke.iam.parkinson_on_fhir.database.tables.records.AssessmentsRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Assessments extends TableImpl<AssessmentsRecord> {

    private static final long serialVersionUID = 1351404428;

    /**
     * The reference instance of <code>public.assessments</code>
     */
    public static final Assessments ASSESSMENTS = new Assessments();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AssessmentsRecord> getRecordType() {
        return AssessmentsRecord.class;
    }

    /**
     * The column <code>public.assessments.name</code>.
     */
    public final TableField<AssessmentsRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.assessments.description</code>.
     */
    public final TableField<AssessmentsRecord, String> DESCRIPTION = createField(DSL.name("description"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.assessments.minimal_severeness</code>.
     */
    public final TableField<AssessmentsRecord, Float> MINIMAL_SEVERENESS = createField(DSL.name("minimal_severeness"), org.jooq.impl.SQLDataType.REAL.nullable(false), this, "");

    /**
     * The column <code>public.assessments.maximal_severeness</code>.
     */
    public final TableField<AssessmentsRecord, Float> MAXIMAL_SEVERENESS = createField(DSL.name("maximal_severeness"), org.jooq.impl.SQLDataType.REAL.nullable(false), this, "");

    /**
     * Create a <code>public.assessments</code> table reference
     */
    public Assessments() {
        this(DSL.name("assessments"), null);
    }

    /**
     * Create an aliased <code>public.assessments</code> table reference
     */
    public Assessments(String alias) {
        this(DSL.name(alias), ASSESSMENTS);
    }

    /**
     * Create an aliased <code>public.assessments</code> table reference
     */
    public Assessments(Name alias) {
        this(alias, ASSESSMENTS);
    }

    private Assessments(Name alias, Table<AssessmentsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Assessments(Name alias, Table<AssessmentsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Assessments(Table<O> child, ForeignKey<O, AssessmentsRecord> key) {
        super(child, key, ASSESSMENTS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<AssessmentsRecord> getPrimaryKey() {
        return Keys.ASSESSMENTS_PKEY;
    }

    @Override
    public List<UniqueKey<AssessmentsRecord>> getKeys() {
        return Arrays.<UniqueKey<AssessmentsRecord>>asList(Keys.ASSESSMENTS_PKEY);
    }

    @Override
    public Assessments as(String alias) {
        return new Assessments(DSL.name(alias), this);
    }

    @Override
    public Assessments as(Name alias) {
        return new Assessments(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Assessments rename(String name) {
        return new Assessments(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Assessments rename(Name name) {
        return new Assessments(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, Float, Float> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
