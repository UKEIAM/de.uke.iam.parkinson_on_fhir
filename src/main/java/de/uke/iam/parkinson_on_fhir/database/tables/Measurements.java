/*
 * This file is generated by jOOQ.
 */
package de.uke.iam.parkinson_on_fhir.database.tables;


import de.uke.iam.parkinson_on_fhir.database.Keys;
import de.uke.iam.parkinson_on_fhir.database.Public;
import de.uke.iam.parkinson_on_fhir.database.tables.records.MeasurementsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Measurements extends TableImpl<MeasurementsRecord> {

    private static final long serialVersionUID = -1850374249;

    /**
     * The reference instance of <code>public.measurements</code>
     */
    public static final Measurements MEASUREMENTS = new Measurements();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MeasurementsRecord> getRecordType() {
        return MeasurementsRecord.class;
    }

    /**
     * The column <code>public.measurements.timestamp</code>.
     */
    public final TableField<MeasurementsRecord, LocalDateTime> TIMESTAMP = createField(DSL.name("timestamp"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>public.measurements.sensor</code>.
     */
    public final TableField<MeasurementsRecord, Integer> SENSOR = createField(DSL.name("sensor"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.measurements.subject</code>.
     */
    public final TableField<MeasurementsRecord, Integer> SUBJECT = createField(DSL.name("subject"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.measurements.x</code>.
     */
    public final TableField<MeasurementsRecord, Float> X = createField(DSL.name("x"), org.jooq.impl.SQLDataType.REAL.nullable(false), this, "");

    /**
     * The column <code>public.measurements.y</code>.
     */
    public final TableField<MeasurementsRecord, Float> Y = createField(DSL.name("y"), org.jooq.impl.SQLDataType.REAL.nullable(false), this, "");

    /**
     * The column <code>public.measurements.z</code>.
     */
    public final TableField<MeasurementsRecord, Float> Z = createField(DSL.name("z"), org.jooq.impl.SQLDataType.REAL.nullable(false), this, "");

    /**
     * Create a <code>public.measurements</code> table reference
     */
    public Measurements() {
        this(DSL.name("measurements"), null);
    }

    /**
     * Create an aliased <code>public.measurements</code> table reference
     */
    public Measurements(String alias) {
        this(DSL.name(alias), MEASUREMENTS);
    }

    /**
     * Create an aliased <code>public.measurements</code> table reference
     */
    public Measurements(Name alias) {
        this(alias, MEASUREMENTS);
    }

    private Measurements(Name alias, Table<MeasurementsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Measurements(Name alias, Table<MeasurementsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Measurements(Table<O> child, ForeignKey<O, MeasurementsRecord> key) {
        super(child, key, MEASUREMENTS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<MeasurementsRecord> getPrimaryKey() {
        return Keys.MEASUREMENTS_PKEY;
    }

    @Override
    public List<UniqueKey<MeasurementsRecord>> getKeys() {
        return Arrays.<UniqueKey<MeasurementsRecord>>asList(Keys.MEASUREMENTS_PKEY);
    }

    @Override
    public List<ForeignKey<MeasurementsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<MeasurementsRecord, ?>>asList(Keys.MEASUREMENTS__SENSOR_FK, Keys.MEASUREMENTS__SUBJECT_FK);
    }

    public Sensors sensors() {
        return new Sensors(this, Keys.MEASUREMENTS__SENSOR_FK);
    }

    public Subjects subjects() {
        return new Subjects(this, Keys.MEASUREMENTS__SUBJECT_FK);
    }

    @Override
    public Measurements as(String alias) {
        return new Measurements(DSL.name(alias), this);
    }

    @Override
    public Measurements as(Name alias) {
        return new Measurements(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Measurements rename(String name) {
        return new Measurements(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Measurements rename(Name name) {
        return new Measurements(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<LocalDateTime, Integer, Integer, Float, Float, Float> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
