/*
 * This file is generated by jOOQ.
 */
package de.uke.iam.parkinson_on_fhir.database.tables;


import de.uke.iam.parkinson_on_fhir.database.Keys;
import de.uke.iam.parkinson_on_fhir.database.Public;
import de.uke.iam.parkinson_on_fhir.database.tables.records.RatingsRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Ratings extends TableImpl<RatingsRecord> {

    private static final long serialVersionUID = 619750212;

    /**
     * The reference instance of <code>public.ratings</code>
     */
    public static final Ratings RATINGS = new Ratings();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RatingsRecord> getRecordType() {
        return RatingsRecord.class;
    }

    /**
     * The column <code>public.ratings.sensor</code>.
     */
    public final TableField<RatingsRecord, Integer> SENSOR = createField(DSL.name("sensor"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.ratings.task</code>.
     */
    public final TableField<RatingsRecord, Integer> TASK = createField(DSL.name("task"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.ratings.assessment</code>.
     */
    public final TableField<RatingsRecord, String> ASSESSMENT = createField(DSL.name("assessment"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.ratings.rating</code>.
     */
    public final TableField<RatingsRecord, Float> RATING = createField(DSL.name("rating"), org.jooq.impl.SQLDataType.REAL.nullable(false), this, "");

    /**
     * The column <code>public.ratings.comment</code>.
     */
    public final TableField<RatingsRecord, String> COMMENT = createField(DSL.name("comment"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>public.ratings</code> table reference
     */
    public Ratings() {
        this(DSL.name("ratings"), null);
    }

    /**
     * Create an aliased <code>public.ratings</code> table reference
     */
    public Ratings(String alias) {
        this(DSL.name(alias), RATINGS);
    }

    /**
     * Create an aliased <code>public.ratings</code> table reference
     */
    public Ratings(Name alias) {
        this(alias, RATINGS);
    }

    private Ratings(Name alias, Table<RatingsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Ratings(Name alias, Table<RatingsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Ratings(Table<O> child, ForeignKey<O, RatingsRecord> key) {
        super(child, key, RATINGS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<RatingsRecord> getPrimaryKey() {
        return Keys.RATINGS_PKEY;
    }

    @Override
    public List<UniqueKey<RatingsRecord>> getKeys() {
        return Arrays.<UniqueKey<RatingsRecord>>asList(Keys.RATINGS_PKEY);
    }

    @Override
    public List<ForeignKey<RatingsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<RatingsRecord, ?>>asList(Keys.RATINGS__SENSOR_FK, Keys.RATINGS__TASK_FK, Keys.RATINGS__ASSESSMENT_FK);
    }

    public Sensors sensors() {
        return new Sensors(this, Keys.RATINGS__SENSOR_FK);
    }

    public Tasks tasks() {
        return new Tasks(this, Keys.RATINGS__TASK_FK);
    }

    public Assessments assessments() {
        return new Assessments(this, Keys.RATINGS__ASSESSMENT_FK);
    }

    @Override
    public Ratings as(String alias) {
        return new Ratings(DSL.name(alias), this);
    }

    @Override
    public Ratings as(Name alias) {
        return new Ratings(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Ratings rename(String name) {
        return new Ratings(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Ratings rename(Name name) {
        return new Ratings(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, Integer, String, Float, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
