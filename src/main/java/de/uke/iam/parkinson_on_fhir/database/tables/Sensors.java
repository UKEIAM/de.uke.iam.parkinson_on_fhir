/*
 * This file is generated by jOOQ.
 */
package de.uke.iam.parkinson_on_fhir.database.tables;


import de.uke.iam.parkinson_on_fhir.database.Keys;
import de.uke.iam.parkinson_on_fhir.database.Public;
import de.uke.iam.parkinson_on_fhir.database.tables.records.SensorsRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Sensors extends TableImpl<SensorsRecord> {

    private static final long serialVersionUID = -1924277826;

    /**
     * The reference instance of <code>public.sensors</code>
     */
    public static final Sensors SENSORS = new Sensors();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SensorsRecord> getRecordType() {
        return SensorsRecord.class;
    }

    /**
     * The column <code>public.sensors.sensor_id</code>.
     */
    public final TableField<SensorsRecord, Integer> SENSOR_ID = createField(DSL.name("sensor_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.sensors.device</code>.
     */
    public final TableField<SensorsRecord, String> DEVICE = createField(DSL.name("device"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.sensors.body_part</code>.
     */
    public final TableField<SensorsRecord, String> BODY_PART = createField(DSL.name("body_part"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * Create a <code>public.sensors</code> table reference
     */
    public Sensors() {
        this(DSL.name("sensors"), null);
    }

    /**
     * Create an aliased <code>public.sensors</code> table reference
     */
    public Sensors(String alias) {
        this(DSL.name(alias), SENSORS);
    }

    /**
     * Create an aliased <code>public.sensors</code> table reference
     */
    public Sensors(Name alias) {
        this(alias, SENSORS);
    }

    private Sensors(Name alias, Table<SensorsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Sensors(Name alias, Table<SensorsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Sensors(Table<O> child, ForeignKey<O, SensorsRecord> key) {
        super(child, key, SENSORS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<SensorsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_SENSORS;
    }

    @Override
    public UniqueKey<SensorsRecord> getPrimaryKey() {
        return Keys.SENSORS_PKEY;
    }

    @Override
    public List<UniqueKey<SensorsRecord>> getKeys() {
        return Arrays.<UniqueKey<SensorsRecord>>asList(Keys.SENSORS_PKEY);
    }

    @Override
    public List<ForeignKey<SensorsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<SensorsRecord, ?>>asList(Keys.SENSORS__DEVICE_FK, Keys.SENSORS__BODY_PART_FK);
    }

    public Devices devices() {
        return new Devices(this, Keys.SENSORS__DEVICE_FK);
    }

    public Bodyparts bodyparts() {
        return new Bodyparts(this, Keys.SENSORS__BODY_PART_FK);
    }

    @Override
    public Sensors as(String alias) {
        return new Sensors(DSL.name(alias), this);
    }

    @Override
    public Sensors as(Name alias) {
        return new Sensors(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Sensors rename(String name) {
        return new Sensors(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Sensors rename(Name name) {
        return new Sensors(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
