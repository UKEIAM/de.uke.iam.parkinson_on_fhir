/*
 * This file is generated by jOOQ.
 */
package de.uke.iam.parkinson_on_fhir.database.tables;


import de.uke.iam.parkinson_on_fhir.database.Keys;
import de.uke.iam.parkinson_on_fhir.database.Public;
import de.uke.iam.parkinson_on_fhir.database.tables.records.SourcesRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Sources extends TableImpl<SourcesRecord> {

    private static final long serialVersionUID = -651271503;

    /**
     * The reference instance of <code>public.sources</code>
     */
    public static final Sources SOURCES = new Sources();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SourcesRecord> getRecordType() {
        return SourcesRecord.class;
    }

    /**
     * The column <code>public.sources.source_id</code>.
     */
    public final TableField<SourcesRecord, Integer> SOURCE_ID = createField(DSL.name("source_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.sources.description</code>.
     */
    public final TableField<SourcesRecord, String> DESCRIPTION = createField(DSL.name("description"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * Create a <code>public.sources</code> table reference
     */
    public Sources() {
        this(DSL.name("sources"), null);
    }

    /**
     * Create an aliased <code>public.sources</code> table reference
     */
    public Sources(String alias) {
        this(DSL.name(alias), SOURCES);
    }

    /**
     * Create an aliased <code>public.sources</code> table reference
     */
    public Sources(Name alias) {
        this(alias, SOURCES);
    }

    private Sources(Name alias, Table<SourcesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Sources(Name alias, Table<SourcesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Sources(Table<O> child, ForeignKey<O, SourcesRecord> key) {
        super(child, key, SOURCES);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<SourcesRecord, Integer> getIdentity() {
        return Keys.IDENTITY_SOURCES;
    }

    @Override
    public UniqueKey<SourcesRecord> getPrimaryKey() {
        return Keys.SOURCES_PKEY;
    }

    @Override
    public List<UniqueKey<SourcesRecord>> getKeys() {
        return Arrays.<UniqueKey<SourcesRecord>>asList(Keys.SOURCES_PKEY);
    }

    @Override
    public Sources as(String alias) {
        return new Sources(DSL.name(alias), this);
    }

    @Override
    public Sources as(Name alias) {
        return new Sources(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Sources rename(String name) {
        return new Sources(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Sources rename(Name name) {
        return new Sources(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
