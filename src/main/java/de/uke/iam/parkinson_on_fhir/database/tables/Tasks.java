/*
 * This file is generated by jOOQ.
 */
package de.uke.iam.parkinson_on_fhir.database.tables;


import de.uke.iam.parkinson_on_fhir.database.Keys;
import de.uke.iam.parkinson_on_fhir.database.Public;
import de.uke.iam.parkinson_on_fhir.database.tables.records.TasksRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Tasks extends TableImpl<TasksRecord> {

    private static final long serialVersionUID = -1628956636;

    /**
     * The reference instance of <code>public.tasks</code>
     */
    public static final Tasks TASKS = new Tasks();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TasksRecord> getRecordType() {
        return TasksRecord.class;
    }

    /**
     * The column <code>public.tasks.task_id</code>.
     */
    public final TableField<TasksRecord, Integer> TASK_ID = createField(DSL.name("task_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.tasks.task_start</code>.
     */
    public final TableField<TasksRecord, LocalDateTime> TASK_START = createField(DSL.name("task_start"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>public.tasks.task_end</code>.
     */
    public final TableField<TasksRecord, LocalDateTime> TASK_END = createField(DSL.name("task_end"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>public.tasks.subject</code>.
     */
    public final TableField<TasksRecord, Integer> SUBJECT = createField(DSL.name("subject"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.tasks.task_type</code>.
     */
    public final TableField<TasksRecord, String> TASK_TYPE = createField(DSL.name("task_type"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.tasks.is_precisely_annotated</code>.
     */
    public final TableField<TasksRecord, Boolean> IS_PRECISELY_ANNOTATED = createField(DSL.name("is_precisely_annotated"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * Create a <code>public.tasks</code> table reference
     */
    public Tasks() {
        this(DSL.name("tasks"), null);
    }

    /**
     * Create an aliased <code>public.tasks</code> table reference
     */
    public Tasks(String alias) {
        this(DSL.name(alias), TASKS);
    }

    /**
     * Create an aliased <code>public.tasks</code> table reference
     */
    public Tasks(Name alias) {
        this(alias, TASKS);
    }

    private Tasks(Name alias, Table<TasksRecord> aliased) {
        this(alias, aliased, null);
    }

    private Tasks(Name alias, Table<TasksRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Tasks(Table<O> child, ForeignKey<O, TasksRecord> key) {
        super(child, key, TASKS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<TasksRecord, Integer> getIdentity() {
        return Keys.IDENTITY_TASKS;
    }

    @Override
    public UniqueKey<TasksRecord> getPrimaryKey() {
        return Keys.TASKS_PKEY;
    }

    @Override
    public List<UniqueKey<TasksRecord>> getKeys() {
        return Arrays.<UniqueKey<TasksRecord>>asList(Keys.TASKS_PKEY);
    }

    @Override
    public List<ForeignKey<TasksRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TasksRecord, ?>>asList(Keys.TASKS__SUBJECT_FK, Keys.TASKS__TASK_TYPE_FK);
    }

    public Subjects subjects() {
        return new Subjects(this, Keys.TASKS__SUBJECT_FK);
    }

    public Tasktypes tasktypes() {
        return new Tasktypes(this, Keys.TASKS__TASK_TYPE_FK);
    }

    @Override
    public Tasks as(String alias) {
        return new Tasks(DSL.name(alias), this);
    }

    @Override
    public Tasks as(Name alias) {
        return new Tasks(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Tasks rename(String name) {
        return new Tasks(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tasks rename(Name name) {
        return new Tasks(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, LocalDateTime, LocalDateTime, Integer, String, Boolean> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
