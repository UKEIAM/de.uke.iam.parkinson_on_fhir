/*
 * This file is generated by jOOQ.
 */
package de.uke.iam.parkinson_on_fhir.database.tables;


import de.uke.iam.parkinson_on_fhir.database.Keys;
import de.uke.iam.parkinson_on_fhir.database.Public;
import de.uke.iam.parkinson_on_fhir.database.tables.records.TasktypesRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Tasktypes extends TableImpl<TasktypesRecord> {

    private static final long serialVersionUID = 1238278596;

    /**
     * The reference instance of <code>public.tasktypes</code>
     */
    public static final Tasktypes TASKTYPES = new Tasktypes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TasktypesRecord> getRecordType() {
        return TasktypesRecord.class;
    }

    /**
     * The column <code>public.tasktypes.name</code>.
     */
    public final TableField<TasktypesRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.tasktypes.description</code>.
     */
    public final TableField<TasktypesRecord, String> DESCRIPTION = createField(DSL.name("description"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.tasktypes.updrs_code</code>.
     */
    public final TableField<TasktypesRecord, String> UPDRS_CODE = createField(DSL.name("updrs_code"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>public.tasktypes</code> table reference
     */
    public Tasktypes() {
        this(DSL.name("tasktypes"), null);
    }

    /**
     * Create an aliased <code>public.tasktypes</code> table reference
     */
    public Tasktypes(String alias) {
        this(DSL.name(alias), TASKTYPES);
    }

    /**
     * Create an aliased <code>public.tasktypes</code> table reference
     */
    public Tasktypes(Name alias) {
        this(alias, TASKTYPES);
    }

    private Tasktypes(Name alias, Table<TasktypesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Tasktypes(Name alias, Table<TasktypesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Tasktypes(Table<O> child, ForeignKey<O, TasktypesRecord> key) {
        super(child, key, TASKTYPES);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<TasktypesRecord> getPrimaryKey() {
        return Keys.TASKTYPES_PKEY;
    }

    @Override
    public List<UniqueKey<TasktypesRecord>> getKeys() {
        return Arrays.<UniqueKey<TasktypesRecord>>asList(Keys.TASKTYPES_PKEY);
    }

    @Override
    public Tasktypes as(String alias) {
        return new Tasktypes(DSL.name(alias), this);
    }

    @Override
    public Tasktypes as(Name alias) {
        return new Tasktypes(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Tasktypes rename(String name) {
        return new Tasktypes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tasktypes rename(Name name) {
        return new Tasktypes(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
