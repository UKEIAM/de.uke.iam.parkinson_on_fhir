/*
 * This file is generated by jOOQ.
 */
package de.uke.iam.parkinson_on_fhir.database.tables.records;


import de.uke.iam.parkinson_on_fhir.database.tables.Assessments;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AssessmentsRecord extends UpdatableRecordImpl<AssessmentsRecord> implements Record4<String, String, Float, Float> {

    private static final long serialVersionUID = 1968604845;

    /**
     * Setter for <code>public.assessments.name</code>.
     */
    public void setName(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.assessments.name</code>.
     */
    public String getName() {
        return (String) get(0);
    }

    /**
     * Setter for <code>public.assessments.description</code>.
     */
    public void setDescription(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.assessments.description</code>.
     */
    public String getDescription() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.assessments.minimal_severeness</code>.
     */
    public void setMinimalSevereness(Float value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.assessments.minimal_severeness</code>.
     */
    public Float getMinimalSevereness() {
        return (Float) get(2);
    }

    /**
     * Setter for <code>public.assessments.maximal_severeness</code>.
     */
    public void setMaximalSevereness(Float value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.assessments.maximal_severeness</code>.
     */
    public Float getMaximalSevereness() {
        return (Float) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, Float, Float> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<String, String, Float, Float> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Assessments.ASSESSMENTS.NAME;
    }

    @Override
    public Field<String> field2() {
        return Assessments.ASSESSMENTS.DESCRIPTION;
    }

    @Override
    public Field<Float> field3() {
        return Assessments.ASSESSMENTS.MINIMAL_SEVERENESS;
    }

    @Override
    public Field<Float> field4() {
        return Assessments.ASSESSMENTS.MAXIMAL_SEVERENESS;
    }

    @Override
    public String component1() {
        return getName();
    }

    @Override
    public String component2() {
        return getDescription();
    }

    @Override
    public Float component3() {
        return getMinimalSevereness();
    }

    @Override
    public Float component4() {
        return getMaximalSevereness();
    }

    @Override
    public String value1() {
        return getName();
    }

    @Override
    public String value2() {
        return getDescription();
    }

    @Override
    public Float value3() {
        return getMinimalSevereness();
    }

    @Override
    public Float value4() {
        return getMaximalSevereness();
    }

    @Override
    public AssessmentsRecord value1(String value) {
        setName(value);
        return this;
    }

    @Override
    public AssessmentsRecord value2(String value) {
        setDescription(value);
        return this;
    }

    @Override
    public AssessmentsRecord value3(Float value) {
        setMinimalSevereness(value);
        return this;
    }

    @Override
    public AssessmentsRecord value4(Float value) {
        setMaximalSevereness(value);
        return this;
    }

    @Override
    public AssessmentsRecord values(String value1, String value2, Float value3, Float value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AssessmentsRecord
     */
    public AssessmentsRecord() {
        super(Assessments.ASSESSMENTS);
    }

    /**
     * Create a detached, initialised AssessmentsRecord
     */
    public AssessmentsRecord(String name, String description, Float minimalSevereness, Float maximalSevereness) {
        super(Assessments.ASSESSMENTS);

        set(0, name);
        set(1, description);
        set(2, minimalSevereness);
        set(3, maximalSevereness);
    }
}
