/*
 * This file is generated by jOOQ.
 */
package de.uke.iam.parkinson_on_fhir.database.tables.records;


import de.uke.iam.parkinson_on_fhir.database.tables.Measurements;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record3;
import org.jooq.Record6;
import org.jooq.Row6;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MeasurementsRecord extends UpdatableRecordImpl<MeasurementsRecord> implements Record6<LocalDateTime, Integer, Integer, Float, Float, Float> {

    private static final long serialVersionUID = -35254899;

    /**
     * Setter for <code>public.measurements.timestamp</code>.
     */
    public void setTimestamp(LocalDateTime value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.measurements.timestamp</code>.
     */
    public LocalDateTime getTimestamp() {
        return (LocalDateTime) get(0);
    }

    /**
     * Setter for <code>public.measurements.sensor</code>.
     */
    public void setSensor(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.measurements.sensor</code>.
     */
    public Integer getSensor() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>public.measurements.subject</code>.
     */
    public void setSubject(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.measurements.subject</code>.
     */
    public Integer getSubject() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>public.measurements.x</code>.
     */
    public void setX(Float value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.measurements.x</code>.
     */
    public Float getX() {
        return (Float) get(3);
    }

    /**
     * Setter for <code>public.measurements.y</code>.
     */
    public void setY(Float value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.measurements.y</code>.
     */
    public Float getY() {
        return (Float) get(4);
    }

    /**
     * Setter for <code>public.measurements.z</code>.
     */
    public void setZ(Float value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.measurements.z</code>.
     */
    public Float getZ() {
        return (Float) get(5);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record3<LocalDateTime, Integer, Integer> key() {
        return (Record3) super.key();
    }

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row6<LocalDateTime, Integer, Integer, Float, Float, Float> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    @Override
    public Row6<LocalDateTime, Integer, Integer, Float, Float, Float> valuesRow() {
        return (Row6) super.valuesRow();
    }

    @Override
    public Field<LocalDateTime> field1() {
        return Measurements.MEASUREMENTS.TIMESTAMP;
    }

    @Override
    public Field<Integer> field2() {
        return Measurements.MEASUREMENTS.SENSOR;
    }

    @Override
    public Field<Integer> field3() {
        return Measurements.MEASUREMENTS.SUBJECT;
    }

    @Override
    public Field<Float> field4() {
        return Measurements.MEASUREMENTS.X;
    }

    @Override
    public Field<Float> field5() {
        return Measurements.MEASUREMENTS.Y;
    }

    @Override
    public Field<Float> field6() {
        return Measurements.MEASUREMENTS.Z;
    }

    @Override
    public LocalDateTime component1() {
        return getTimestamp();
    }

    @Override
    public Integer component2() {
        return getSensor();
    }

    @Override
    public Integer component3() {
        return getSubject();
    }

    @Override
    public Float component4() {
        return getX();
    }

    @Override
    public Float component5() {
        return getY();
    }

    @Override
    public Float component6() {
        return getZ();
    }

    @Override
    public LocalDateTime value1() {
        return getTimestamp();
    }

    @Override
    public Integer value2() {
        return getSensor();
    }

    @Override
    public Integer value3() {
        return getSubject();
    }

    @Override
    public Float value4() {
        return getX();
    }

    @Override
    public Float value5() {
        return getY();
    }

    @Override
    public Float value6() {
        return getZ();
    }

    @Override
    public MeasurementsRecord value1(LocalDateTime value) {
        setTimestamp(value);
        return this;
    }

    @Override
    public MeasurementsRecord value2(Integer value) {
        setSensor(value);
        return this;
    }

    @Override
    public MeasurementsRecord value3(Integer value) {
        setSubject(value);
        return this;
    }

    @Override
    public MeasurementsRecord value4(Float value) {
        setX(value);
        return this;
    }

    @Override
    public MeasurementsRecord value5(Float value) {
        setY(value);
        return this;
    }

    @Override
    public MeasurementsRecord value6(Float value) {
        setZ(value);
        return this;
    }

    @Override
    public MeasurementsRecord values(LocalDateTime value1, Integer value2, Integer value3, Float value4, Float value5, Float value6) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached MeasurementsRecord
     */
    public MeasurementsRecord() {
        super(Measurements.MEASUREMENTS);
    }

    /**
     * Create a detached, initialised MeasurementsRecord
     */
    public MeasurementsRecord(LocalDateTime timestamp, Integer sensor, Integer subject, Float x, Float y, Float z) {
        super(Measurements.MEASUREMENTS);

        set(0, timestamp);
        set(1, sensor);
        set(2, subject);
        set(3, x);
        set(4, y);
        set(5, z);
    }
}
