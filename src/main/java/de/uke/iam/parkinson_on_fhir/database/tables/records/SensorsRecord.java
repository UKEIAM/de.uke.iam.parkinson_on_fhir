/*
 * This file is generated by jOOQ.
 */
package de.uke.iam.parkinson_on_fhir.database.tables.records;


import de.uke.iam.parkinson_on_fhir.database.tables.Sensors;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SensorsRecord extends UpdatableRecordImpl<SensorsRecord> implements Record3<Integer, String, String> {

    private static final long serialVersionUID = 1025611076;

    /**
     * Setter for <code>public.sensors.sensor_id</code>.
     */
    public void setSensorId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.sensors.sensor_id</code>.
     */
    public Integer getSensorId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.sensors.device</code>.
     */
    public void setDevice(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.sensors.device</code>.
     */
    public String getDevice() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.sensors.body_part</code>.
     */
    public void setBodyPart(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.sensors.body_part</code>.
     */
    public String getBodyPart() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Integer, String, String> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Sensors.SENSORS.SENSOR_ID;
    }

    @Override
    public Field<String> field2() {
        return Sensors.SENSORS.DEVICE;
    }

    @Override
    public Field<String> field3() {
        return Sensors.SENSORS.BODY_PART;
    }

    @Override
    public Integer component1() {
        return getSensorId();
    }

    @Override
    public String component2() {
        return getDevice();
    }

    @Override
    public String component3() {
        return getBodyPart();
    }

    @Override
    public Integer value1() {
        return getSensorId();
    }

    @Override
    public String value2() {
        return getDevice();
    }

    @Override
    public String value3() {
        return getBodyPart();
    }

    @Override
    public SensorsRecord value1(Integer value) {
        setSensorId(value);
        return this;
    }

    @Override
    public SensorsRecord value2(String value) {
        setDevice(value);
        return this;
    }

    @Override
    public SensorsRecord value3(String value) {
        setBodyPart(value);
        return this;
    }

    @Override
    public SensorsRecord values(Integer value1, String value2, String value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SensorsRecord
     */
    public SensorsRecord() {
        super(Sensors.SENSORS);
    }

    /**
     * Create a detached, initialised SensorsRecord
     */
    public SensorsRecord(Integer sensorId, String device, String bodyPart) {
        super(Sensors.SENSORS);

        set(0, sensorId);
        set(1, device);
        set(2, bodyPart);
    }
}
